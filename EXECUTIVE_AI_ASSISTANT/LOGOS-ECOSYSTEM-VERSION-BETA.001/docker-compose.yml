version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: logos-postgres
    environment:
      POSTGRES_USER: logos_admin
      POSTGRES_PASSWORD: LogosDB2024Secure!
      POSTGRES_DB: logos_production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - logos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logos_admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: logos-redis
    ports:
      - "6379:6379"
    networks:
      - logos-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: logos-backend
    environment:
      - DATABASE_URL=postgresql://logos_admin:LogosDB2024Secure!@postgres:5432/logos_production
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-here
      - JWT_SECRET_KEY=your-jwt-secret-here
      - ENVIRONMENT=development
      - CORS_ORIGINS=http://localhost:3000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - logos-network
    volumes:
      - ./backend:/app
      - /app/venv
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: logos-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - logos-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

  # Nginx (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: logos-nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - logos-network
    profiles:
      - production

  # PgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: logos-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@logosecosystem.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - logos-network
    depends_on:
      - postgres
    profiles:
      - tools

networks:
  logos-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: