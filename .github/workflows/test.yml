name: Test & Lint

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [develop]

env:
  NODE_VERSION: '18.x'

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run linter
        run: |
          cd frontend
          npm run lint
          
      - name: Run type check
        run: |
          cd frontend
          npm run type-check
          
      - name: Run unit tests
        run: |
          cd frontend
          npm run test:ci
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./frontend/coverage
          flags: frontend
          
      - name: Build application
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_dummy
          NEXT_PUBLIC_API_URL: http://localhost:5000

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: logos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd backend
          npm ci
          
      - name: Run linter
        run: |
          cd backend
          npm run lint
          
      - name: Setup test database
        run: |
          cd backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/logos_test
          
      - name: Run unit tests
        run: |
          cd backend
          npm run test
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/logos_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          NODE_ENV: test
          
      - name: Run integration tests
        run: |
          cd backend
          npm run test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/logos_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          NODE_ENV: test
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./backend/coverage
          flags: backend
          
      - name: Build application
        run: |
          cd backend
          npm run build

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: logos_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --prefix frontend
          npm ci --prefix backend
          
      - name: Setup test database
        run: |
          cd backend
          npx prisma migrate deploy
          npx prisma db seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/logos_e2e
          
      - name: Start backend server
        run: |
          cd backend
          npm run build
          npm start &
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/logos_e2e
          JWT_SECRET: test-secret
          NODE_ENV: test
          PORT: 5000
          
      - name: Start frontend server
        run: |
          cd frontend
          npm run build
          npm start &
        env:
          NEXT_PUBLIC_API_URL: http://localhost:5000
          
      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3000 http://localhost:5000 -t 60000
          
      - name: Run Cypress tests
        uses: cypress-io/github-action@v5
        with:
          browser: chrome
          headed: false
          config: baseUrl=http://localhost:3000
          wait-on: 'http://localhost:3000, http://localhost:5000'
          wait-on-timeout: 120
        env:
          CYPRESS_API_URL: http://localhost:5000
          
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: Check code formatting
        run: |
          npm ci --prefix frontend
          npm ci --prefix backend
          cd frontend && npm run format:check
          cd ../backend && npm run format:check
          
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          
      - name: License check
        run: |
          npm ci -g license-checker
          cd frontend && license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'
          cd ../backend && license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'