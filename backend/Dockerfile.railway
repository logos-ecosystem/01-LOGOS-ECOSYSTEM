# Optimized Dockerfile for Railway deployment
FROM node:20-alpine AS base

# Install dependencies for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    cairo-dev \
    pango-dev \
    giflib-dev \
    libjpeg-turbo-dev

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./

# Install dependencies with increased memory limit
ENV NODE_OPTIONS="--max-old-space-size=2048"

# Install all dependencies (including devDependencies for build)
RUN npm ci --no-audit --no-fund

# Copy Prisma files
COPY prisma ./prisma

# Generate Prisma client
RUN npx prisma generate

# Copy source code
COPY src ./src

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install runtime dependencies only
RUN apk add --no-cache \
    cairo \
    pango \
    giflib \
    libjpeg-turbo

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies only with memory optimization
ENV NODE_OPTIONS="--max-old-space-size=1024"
RUN npm ci --production --no-audit --no-fund && \
    npm cache clean --force

# Copy built application
COPY --from=base /app/dist ./dist
COPY --from=base /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=base /app/prisma ./prisma

# Copy necessary files
COPY translations ./translations
COPY src/templates ./src/templates

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Change ownership
RUN chown -R nodejs:nodejs /app

USER nodejs

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"

# Start the application
CMD ["node", "dist/server.js"]